#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–æ—Å–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑"
"""
import requests
import json

BASE_URL = "http://localhost:8002"

def test_smart_outlier_handling():
    print("=" * 80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ë–†–û–°–û–í v2.2")
    print("=" * 80)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ HTML...")
    response = requests.get(f"{BASE_URL}/")
    html_content = response.text
    
    smart_features = {
        "–§—É–Ω–∫—Ü–∏—è percentile": "function percentile(" in html_content,
        "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ p5/p95": "percentile(allValues, 5)" in html_content,
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤": "hasExtremeOutliers" in html_content,
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö": "displayPredicted" in html_content,
        "–ü–æ–¥—Å—á–µ—Ç clippedCount": "clippedCount++" in html_content,
        "–£–º–Ω—ã–µ tooltip'—ã": "originalValue" in html_content,
        "–ù–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ": "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏" in html_content,
        "–õ–∏–Ω–µ–π–Ω–∞—è —à–∫–∞–ª–∞": "type: 'linear'" in html_content,
        "–í–µ—Ä—Å–∏—è v2.2": "v2.2 (Smart Outliers)" in html_content
    }
    
    for name, found in smart_features.items():
        status = "‚úÖ" if found else "‚ùå"
        print(f"   {status} {name}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    dept_response = requests.get(f"{BASE_URL}/api/departments/")
    if dept_response.status_code == 200:
        departments = dept_response.json()
        test_dept = departments[0] if departments else None
        
        if test_dept:
            dept_id = test_dept['id']
            dept_name = test_dept['name']
            
            print(f"   –¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {dept_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
            comp_response = requests.get(f"{BASE_URL}/api/forecast/comparison", {
                "from_date": "2025-06-01",
                "to_date": "2025-06-07",
                "department_id": dept_id
            })
            
            if comp_response.status_code == 200:
                data = comp_response.json()
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
                
                if len(data) > 0:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    predicted = [item['predicted_sales'] for item in data if item['predicted_sales']]
                    actual = [item['actual_sales'] for item in data if item['actual_sales']]
                    all_values = predicted + actual
                    
                    if all_values:
                        min_val = min(all_values)
                        max_val = max(all_values)
                        ratio = max_val / min_val
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏ (—Å–∏–º—É–ª–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º)
                        sorted_vals = sorted(all_values)
                        p5_idx = int(0.05 * (len(sorted_vals) - 1))
                        p95_idx = int(0.95 * (len(sorted_vals) - 1))
                        p5 = sorted_vals[p5_idx]
                        p95 = sorted_vals[p95_idx]
                        
                        original_range = max_val - min_val
                        clipped_range = p95 - p5
                        has_outliers = original_range / clipped_range > 3
                        
                        print(f"\n   üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
                        print(f"      –î–∏–∞–ø–∞–∑–æ–Ω: {min_val:,.0f}‚Ç∏ - {max_val:,.0f}‚Ç∏")
                        print(f"      –†–∞–∑–±—Ä–æ—Å: {ratio:.1f}x")
                        print(f"      5-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p5:,.0f}‚Ç∏")
                        print(f"      95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {p95:,.0f}‚Ç∏")
                        print(f"      –ï—Å—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã: {'–î–ê' if has_outliers else '–ù–ï–¢'}")
                        
                        if has_outliers:
                            outliers_count = sum(1 for v in all_values if v < p5 or v > p95)
                            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤: {outliers_count}")
                            print(f"      ‚úÖ –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏")
                        else:
                            print(f"      ‚úÖ –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
    print(f"\n" + "=" * 80)
    print("–ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø v2.2")
    print("=" * 80)
    
    improvements = [
        ("üéØ –ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–í—ã–±—Ä–æ—Å—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç—Å—è 5-95 –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—è–º–∏"),
        ("üìä –ß–∏—Ç–∞–µ–º–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç–Ω—ã–º –ø—Ä–∏ –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö"),
        ("üí° –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏", "Tooltip'—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"),
        ("üîç –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫"),
        ("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–¢–æ–ª—å–∫–æ –ª–∏–Ω–µ–π–Ω–∞—è —à–∫–∞–ª–∞ - –±—ã—Å—Ç—Ä–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞"),
        ("üé® –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"),
        ("üìà –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –º—ã—à—å—é"),
        ("üöÄ –õ—É—á—à–∏–π UX", "–ì—Ä–∞—Ñ–∏–∫ –≤—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π")
    ]
    
    for title, desc in improvements:
        print(f"   {title}: {desc}")

def show_testing_instructions():
    print(f"\n" + "=" * 80)
    print("–ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø v2.2")
    print("=" * 80)
    
    print(f"\nüîó –û—Ç–∫—Ä–æ–π—Ç–µ: {BASE_URL}/")
    print("\nüìã –®–∞–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ü–†–û–ì–ù–û–ó –ü–†–û–î–ê–ñ ‚Üí üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç / –ø—Ä–æ–≥–Ω–æ–∑")
    print("2. –ü–µ—Ä–∏–æ–¥: 01.06.2025 - 07.06.2025")
    print("3. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Ñ–∏–ª–∏–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–¥–ª–µ–Ω Plaza)")
    print("4. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'")
    
    print("\n‚úÖ –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å:")
    print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –≤—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º—ã–π (–±–µ–∑ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Å–∫–∞—á–∫–æ–≤)")
    print("‚Ä¢ –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—ã–±—Ä–æ—Å–æ–≤: –≥–æ–ª—É–±–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏")
    print("‚Ä¢ –ü–æ–¥–ø–∏—Å–∏ –æ—Å–∏: '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' –µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    print("‚Ä¢ Tooltip'—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç:")
    print("  - –†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞")
    print("  - '(–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ: ...)' –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ")
    print("‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —à–∫–∞–ª—ã")
    print("‚Ä¢ –ü–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏ –±–µ–∑ —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤")
    
    print("\nüéØ –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("‚Ä¢ –î–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤ ‚Üí –æ–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    print("‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏ ‚Üí –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    print("‚Ä¢ –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ ‚Üí —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ tooltip'–∞—Ö")
    print("‚Ä¢ –†–∞–∑–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã ‚Üí –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ")
    
    print("\nüîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π:")
    print("‚Ä¢ v2.1: –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ (–ø–ª–æ—Ö–æ —á–∏—Ç–∞–µ—Ç—Å—è)")
    print("‚Ä¢ v2.2: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (–æ—Ç–ª–∏—á–Ω–æ —á–∏—Ç–∞–µ—Ç—Å—è)")

if __name__ == "__main__":
    test_smart_outlier_handling()
    show_testing_instructions()
    
    print(f"\n" + "=" * 80)
    print("üéâ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–†–û–°–û–í –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê!")
    print("=" * 80)