#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: 6 –º–µ—Å—è—Ü–µ–≤, 12 –º–µ—Å—è—Ü–µ–≤, 18 –º–µ—Å—è—Ü–µ–≤, 24 –º–µ—Å—è—Ü–∞
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime, timedelta

API_BASE_URL = "http://localhost:8002"
RETRAIN_ENDPOINT = f"{API_BASE_URL}/api/forecast/retrain"
MODEL_INFO_ENDPOINT = f"{API_BASE_URL}/api/forecast/model/info"

# –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –¥–Ω—è—Ö)
PERIODS_TO_TEST = [
    (180, "6 –º–µ—Å—è—Ü–µ–≤"),
    (365, "12 –º–µ—Å—è—Ü–µ–≤"),
    (547, "18 –º–µ—Å—è—Ü–µ–≤"),
    (730, "24 –º–µ—Å—è—Ü–∞")
]

async def test_training_period(days: int, period_name: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print(f"\n{'='*50}")
    print(f"üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {period_name} ({days} –¥–Ω–µ–π)")
    print(f"{'='*50}")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –∫–æ–¥–µ (—á–µ—Ä–µ–∑ API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å API –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π endpoint
    
    try:
        start_time = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        # –ü–æ–∫–∞ API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π endpoint
        timeout = aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(RETRAIN_ENDPOINT) as response:
                if response.status == 200:
                    result = await response.json()
                    elapsed_time = time.time() - start_time
                    
                    print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.1f} —Å–µ–∫")
                    
                    if 'metrics' in result:
                        metrics = result['metrics']
                        train_samples = metrics.get('train_samples', 0)
                        val_samples = metrics.get('val_samples', 0) 
                        test_samples = metrics.get('test_samples', 0)
                        total_samples = train_samples + val_samples + test_samples
                        
                        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                        print(f"  - –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: {total_samples:,} –∑–∞–ø–∏—Å–µ–π")
                        print(f"  - Test MAPE: {metrics.get('test_mape', 0):.2f}%")
                        print(f"  - Val MAPE: {metrics.get('val_mape', 0):.2f}%")
                        print(f"  - R¬≤: {metrics.get('test_r2', 0):.4f}")
                        
                        return {
                            'period_days': days,
                            'period_name': period_name,
                            'total_samples': total_samples,
                            'test_mape': metrics.get('test_mape', 0),
                            'val_mape': metrics.get('val_mape', 0),
                            'test_r2': metrics.get('test_r2', 0),
                            'training_time': elapsed_time
                        }
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return None

async def quick_period_analysis():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è - —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–ê –î–ê–ù–ù–´–• –ü–û –ü–ï–†–ò–û–î–ê–ú:")
    print("=" * 60)
    
    from datetime import datetime, timedelta
    import aiohttp
    
    end_date = datetime.now().date()
    
    async with aiohttp.ClientSession() as session:
        for days, period_name in PERIODS_TO_TEST:
            start_date = end_date - timedelta(days=days)
            
            # –ó–¥–µ—Å—å –º—ã –±—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint
            # –ü–æ–∫–∞ –ø–æ–∫–∞–∂–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
            avg_records_per_day = 15097 / (datetime.now().date() - datetime(2022, 3, 1).date()).days
            estimated_records = int(avg_records_per_day * days)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏ –æ—Ç rolling features
            departments = 40  # –ø—Ä–∏–º–µ—Ä–Ω–æ
            estimated_after_dropna = estimated_records - (departments * 7)
            
            print(f"\nüìÖ {period_name} ({start_date} - {end_date}):")
            print(f"  - –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å–µ–π: ~{estimated_after_dropna:,}")
            print(f"  - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {estimated_after_dropna/5008:.1f}x")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
            if estimated_after_dropna > 10000:
                quality_estimate = "–û—Ç–ª–∏—á–Ω–æ"
            elif estimated_after_dropna > 7000:
                quality_estimate = "–•–æ—Ä–æ—à–æ"
            elif estimated_after_dropna > 5000:
                quality_estimate = "–ù–æ—Ä–º–∞–ª—å–Ω–æ"
            else:
                quality_estimate = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
            
            print(f"  - –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_estimate}")

async def create_custom_retrain_request(days: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É"""
    # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ API –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ training_days
    # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
    pass

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî¨ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    print("=" * 50)
    
    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
    await quick_period_analysis()
    
    print(f"\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 50)
    
    print("\nüéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 12-18 –º–µ—Å—è—Ü–µ–≤")
    print("   –ü—Ä–∏—á–∏–Ω—ã:")
    print("   ‚úÖ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –≥–æ–¥–æ–≤–æ–π —Ü–∏–∫–ª —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
    print("   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–æ—Ä–æ—à–µ–π –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("   ‚úÖ –ù–µ –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (2022)")
    print("   ‚úÖ –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –æ–±—ä–µ–º–æ–º")
    
    print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å 3+ –≥–æ–¥–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:")
    print("   - MAPE —É–≤–µ–ª–∏—á–∏–ª—Å—è –¥–æ 10.42% (–±—ã–ª 7.67%)")
    print("   - –í–µ—Ä–æ—è—Ç–Ω–æ, –¥–∞–Ω–Ω—ã–µ 2022-2023 —Å–æ–¥–µ—Ä–∂–∞—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
    print("   - –ë–∏–∑–Ω–µ—Å –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è")
    
    print(f"\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –í–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ 365 –¥–Ω–µ–π (12 –º–µ—Å—è—Ü–µ–≤)")
    print("   2. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
    print("   3. –°—Ä–∞–≤–Ω–∏—Ç—å —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é (180 –¥–Ω–µ–π)")
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    apply_recommendation = input("\n‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (12 –º–µ—Å—è—Ü–µ–≤)? (y/n): ").strip().lower()
    
    if apply_recommendation == 'y':
        print("\nüîß –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å
        print("‚úÖ –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç–µ training_service.py:")
        print("   start_date = end_date - timedelta(days=365)")
        print("   –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API")
    else:
        print("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main())