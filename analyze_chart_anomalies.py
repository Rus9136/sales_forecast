#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –∞–Ω–æ–º–∞–ª–∏—è—Ö
"""
import json

# –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
data = [
    {"date":"2025-06-01","predicted_sales":597896.54,"actual_sales":1063939.25},
    {"date":"2025-06-02","predicted_sales":1403580.67,"actual_sales":362424.0},
    {"date":"2025-06-03","predicted_sales":222441.66,"actual_sales":364130.0},
    {"date":"2025-06-04","predicted_sales":371386.4,"actual_sales":354109.0},
    {"date":"2025-06-05","predicted_sales":339182.52,"actual_sales":290542.0},
    {"date":"2025-06-06","predicted_sales":264949.48,"actual_sales":387173.0},
    {"date":"2025-06-07","predicted_sales":562517.88,"actual_sales":415558.0}
]

def analyze_data_issues():
    print("=" * 80)
    print("–ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ß–ò–¢–ê–ï–ú–û–°–¢–ò –ì–†–ê–§–ò–ö–ê –ü–†–ò –ê–ù–û–ú–ê–õ–ò–Ø–•")
    print("=" * 80)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
    predicted = [item['predicted_sales'] for item in data]
    actual = [item['actual_sales'] for item in data]
    all_values = predicted + actual
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    min_val = min(all_values)
    max_val = max(all_values)
    avg_val = sum(all_values) / len(all_values)
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
    print(f"   –ú–∏–Ω–∏–º—É–º: {min_val:>12,.0f}‚Ç∏")
    print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_val:>11,.0f}‚Ç∏")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_val:>12,.0f}‚Ç∏")
    print(f"   –†–∞–∑–±—Ä–æ—Å: {max_val/min_val:>13.1f}x")
    
    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –û–¢–ö–õ–û–ù–ï–ù–ò–ô:")
    extreme_values = []
    
    for i, val in enumerate(all_values):
        deviation = abs(val - avg_val) / avg_val * 100
        is_extreme = deviation > 50  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 50%
        
        data_type = "–ü—Ä–æ–≥–Ω–æ–∑" if i < len(predicted) else "–§–∞–∫—Ç"
        date_idx = i if i < len(predicted) else i - len(predicted)
        date = data[date_idx]['date']
        
        if is_extreme:
            extreme_values.append({
                'date': date,
                'type': data_type,
                'value': val,
                'deviation': deviation
            })
    
    print(f"   –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (>50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ): {len(extreme_values)}")
    for ext in extreme_values:
        print(f"   üìà {ext['date']} {ext['type']:7}: {ext['value']:>10,.0f}‚Ç∏ ({ext['deviation']:>5.1f}%)")
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –¢–ï–ö–£–©–ï–ì–û –õ–û–ì–ê–†–ò–§–ú–ò–ß–ï–°–ö–û–ì–û –ü–û–î–•–û–î–ê:")
    print(f"   1. –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ")
    print(f"   2. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ —Ä–∞–≤–Ω–æ '—Å–∂–∏–º–∞—é—Ç' –æ–±—ã—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print(f"   3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–∑–ª–∏—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–µ –¥–∞–Ω–Ω—ã—Ö")
    print(f"   4. –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ—á–∏—Ç–∞–µ–º—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

def suggest_solutions():
    print(f"\n‚úÖ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –†–ï–®–ï–ù–ò–Ø:")
    
    solutions = [
        ("IQR Outlier Detection", "–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –º–µ—Ç–æ–¥–æ–º –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞"),
        ("Winsorization", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π percentile'–∞–º–∏"),
        ("Dual Y-Axis", "–î–≤–µ –æ—Å–∏: –æ—Å–Ω–æ–≤–Ω–∞—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤—Ç–æ—Ä–∞—è –¥–ª—è –≤—ã–±—Ä–æ—Å–æ–≤"),
        ("Data Smoothing", "–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤ —Å–∫–æ–ª—å–∑—è—â–∏–º —Å—Ä–µ–¥–Ω–∏–º"),
        ("Zoom Controls", "–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"),
        ("Outlier Indicators", "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤—ã–±—Ä–æ—Å–æ–≤ —Å –ø–æ–¥–ø–∏—Å—è–º–∏")
    ]
    
    for i, (name, desc) in enumerate(solutions, 1):
        print(f"   {i}. {name}: {desc}")

def recommend_implementation():
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:")
    print(f"   ‚îå‚îÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º Winsorization (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 5-95 –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–µ–π)")
    print(f"   ‚îú‚îÄ + IQR —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤")  
    print(f"   ‚îú‚îÄ + –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print(f"   ‚îú‚îÄ + Tooltip'—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    print(f"   ‚îî‚îÄ + –û–ø—Ü–∏—è '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    print(f"\nüìù –ê–õ–ì–û–†–ò–¢–ú:")
    print(f"   1. –í—ã—á–∏—Å–ª—è–µ–º 5-–π –∏ 95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏")
    print(f"   2. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    print(f"   3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫")
    print(f"   4. –í tooltip'–∞—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ) –∑–Ω–∞—á–µ–Ω–∏—è")
    print(f"   5. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    analyze_data_issues()
    suggest_solutions()
    recommend_implementation()