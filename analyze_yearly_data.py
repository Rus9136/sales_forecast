#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –≥–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
from datetime import datetime, timedelta
from sqlalchemy import create_engine, text
import numpy as np

DATABASE_URL = "postgresql://sales_user:sales_password@localhost:5435/sales_forecast"
engine = create_engine(DATABASE_URL)

def analyze_yearly_data():
    print("=== –ê–ù–ê–õ–ò–ó –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò –ù–ê –ì–û–î–û–í–´–• –î–ê–ù–ù–´–• ===\n")
    
    # 1. –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å (180 –¥–Ω–µ–π)
    print("üìä –¢–ï–ö–£–©–ê–Ø –ú–û–î–ï–õ–¨ (180 –¥–Ω–µ–π):")
    print("  - –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: ~5,008 –∑–∞–ø–∏—Å–µ–π")
    print("  - Test MAPE: 7.67%")
    print("  - R¬≤: 0.9952")
    
    # 2. –ê–Ω–∞–ª–∏–∑ –≥–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    end_date = datetime.now().date()
    start_date_180 = end_date - timedelta(days=180)
    start_date_365 = end_date - timedelta(days=365)
    
    print(f"\nüìä –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨ (365 –¥–Ω–µ–π):")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    query_365 = f"""
    SELECT 
        COUNT(*) as total_records,
        COUNT(DISTINCT department_id) as departments,
        COUNT(DISTINCT date) as unique_dates
    FROM sales_summary 
    WHERE total_sales > 0 
    AND date >= '{start_date_365}'
    AND date <= '{end_date}'
    """
    
    with engine.connect() as conn:
        result = conn.execute(text(query_365))
        data_365 = result.fetchone()
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ dropna (—Ç–µ—Ä—è–µ–º ~7 –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–∑-–∑–∞ lag features)
    estimated_after_dropna = data_365[0] - (data_365[1] * 7)
    
    print(f"  - –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {data_365[0]:,}")
    print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤: {data_365[1]}")
    print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {data_365[2]}")
    print(f"  - –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ dropna: ~{estimated_after_dropna:,} –∑–∞–ø–∏—Å–µ–π")
    print(f"  - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö: {estimated_after_dropna/5008:.1f}x")
    
    # 3. –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    print("\nüìà –ê–ù–ê–õ–ò–ó –°–ï–ó–û–ù–ù–û–°–¢–ò:")
    
    query_monthly = f"""
    SELECT 
        EXTRACT(MONTH FROM date) as month,
        COUNT(*) as records,
        ROUND(AVG(total_sales)::numeric, 0) as avg_sales,
        ROUND(STDDEV(total_sales)::numeric, 0) as std_sales
    FROM sales_summary 
    WHERE total_sales > 0 
    AND date >= '{start_date_365}'
    AND date <= '{end_date}'
    GROUP BY month
    ORDER BY month
    """
    
    with engine.connect() as conn:
        monthly_df = pd.read_sql(query_monthly, conn)
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    cv_monthly = monthly_df['avg_sales'].std() / monthly_df['avg_sales'].mean() * 100
    
    print(f"  - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º: {cv_monthly:.1f}%")
    if cv_monthly > 20:
        print("  - ‚úÖ –í–´–°–û–ö–ê–Ø –°–ï–ó–û–ù–ù–û–°–¢–¨ - –≥–æ–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã!")
    else:
        print("  - ‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å - –≥–æ–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –º–µ—Å—è—Ü—ã
    print("\n  –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º:")
    months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
    for _, row in monthly_df.iterrows():
        month_idx = int(row['month']) - 1
        print(f"    {months[month_idx]}: {row['avg_sales']:,.0f} —Ç–≥")
    
    # 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π
    print("\nüéâ –ê–ù–ê–õ–ò–ó –û–°–û–ë–´–• –î–ù–ï–ô:")
    
    query_holidays = f"""
    SELECT 
        date,
        SUM(total_sales) as daily_total,
        COUNT(DISTINCT department_id) as departments
    FROM sales_summary 
    WHERE total_sales > 0 
    AND date >= '{start_date_365}'
    AND date <= '{end_date}'
    GROUP BY date
    ORDER BY daily_total DESC
    LIMIT 10
    """
    
    with engine.connect() as conn:
        top_days = pd.read_sql(query_holidays, conn)
    
    print("  –¢–æ–ø-10 –¥–Ω–µ–π –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:")
    for _, row in top_days.iterrows():
        date_str = row['date'].strftime('%Y-%m-%d (%A)')
        print(f"    {date_str}: {row['daily_total']:,.0f} —Ç–≥")
    
    # 5. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏
    print("\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –û–ë–£–ß–ï–ù–ò–Ø –ù–ê –ì–û–î–û–í–´–• –î–ê–ù–ù–´–•:")
    print("  1. –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö ‚Üí –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ª—É—á—à–∞—è –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏—è")
    print("  2. –ó–∞—Ö–≤–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –≥–æ–¥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
    print("  3. –£—á–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –æ—Å–æ–±—ã—Ö —Å–æ–±—ã—Ç–∏–π")
    print("  4. –õ—É—á—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤")
    
    print("\n‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ù–ï–î–û–°–¢–ê–¢–ö–ò:")
    print("  1. –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏")
    print("  2. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∏–∑–Ω–µ—Å–µ –∑–∞ –≥–æ–¥ (–Ω–æ–≤—ã–µ —Ñ–∏–ª–∏–∞–ª—ã, –∑–∞–∫—Ä—ã—Ç–∏—è)")
    print("  3. –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ")
    print("  4. –†–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö")
    
    # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
    if cv_monthly > 20:
        print("  ‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–Æ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –≥–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
        print("  –í—ã—Å–æ–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –≥–æ–¥–∞.")
        print(f"  –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ MAPE: —Å 7.67% –¥–æ ~6.5-7.0%")
    else:
        print("  ‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≥–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ.")
        print("  –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ.")
    
    # 7. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    print("\nüîß –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –í–ê–†–ò–ê–ù–¢–´:")
    for days in [270, 300, 330]:
        query = f"""
        SELECT COUNT(*) as cnt
        FROM sales_summary 
        WHERE total_sales > 0 
        AND date >= CURRENT_DATE - INTERVAL '{days} days'
        """
        with engine.connect() as conn:
            result = conn.execute(text(query))
            count = result.scalar()
        est = count - 40*7  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"  - {days} –¥–Ω–µ–π: ~{est:,} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

if __name__ == "__main__":
    analyze_yearly_data()