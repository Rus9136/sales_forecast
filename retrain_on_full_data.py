#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (3+ –≥–æ–¥–∞)
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime, timedelta

API_BASE_URL = "http://localhost:8002"
RETRAIN_ENDPOINT = f"{API_BASE_URL}/api/forecast/retrain"
MODEL_INFO_ENDPOINT = f"{API_BASE_URL}/api/forecast/model/info"
STATS_ENDPOINT = f"{API_BASE_URL}/api/sales/stats"

async def check_api_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(STATS_ENDPOINT) as response:
                if response.status == 200:
                    stats = await response.json()
                    print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    print(f"üìä –î–∞–Ω–Ω—ã—Ö –≤ –ë–î: {stats.get('summary_records', 0)} –∑–∞–ø–∏—Å–µ–π")
                    return True
                else:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return False

async def get_current_model_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
    print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏:")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(MODEL_INFO_ENDPOINT) as response:
                if response.status == 200:
                    info = await response.json()
                    print(f"  –°—Ç–∞—Ç—É—Å: {info.get('status', 'unknown')}")
                    if 'training_metrics' in info:
                        metrics = info['training_metrics']
                        print(f"  –¢–µ–∫—É—â–∏–π MAPE: {metrics.get('test_mape', 'N/A'):.2f}%")
                        print(f"  –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {metrics.get('train_samples', 0) + metrics.get('val_samples', 0) + metrics.get('test_samples', 0)}")
                        print(f"  R¬≤: {metrics.get('test_r2', 'N/A'):.4f}")
                    return info
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status}")
                    return None
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return None

async def retrain_model():
    """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-5 –º–∏–Ω—É—Ç...")
    
    start_time = time.time()
    
    try:
        timeout = aiohttp.ClientTimeout(total=600)  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(RETRAIN_ENDPOINT) as response:
                if response.status == 200:
                    result = await response.json()
                    elapsed_time = time.time() - start_time
                    
                    print(f"\n‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time/60:.1f} –º–∏–Ω—É—Ç!")
                    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø:")
                    
                    # Training metrics
                    if 'training_data_info' in result:
                        data_info = result['training_data_info']
                        print(f"üìà –û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö:")
                        print(f"  - Train: {data_info.get('train_samples', 0):,} –∑–∞–ø–∏—Å–µ–π")
                        print(f"  - Validation: {data_info.get('val_samples', 0):,} –∑–∞–ø–∏—Å–µ–π")
                        print(f"  - Test: {data_info.get('test_samples', 0):,} –∑–∞–ø–∏—Å–µ–π")
                        print(f"  - –í–°–ï–ì–û: {data_info.get('total_samples', 0):,} –∑–∞–ø–∏—Å–µ–π")
                    
                    # Model metrics
                    if 'metrics' in result:
                        metrics = result['metrics']
                        print(f"\nüéØ –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:")
                        print(f"  - Test MAPE: {metrics.get('test_mape', 0):.2f}%")
                        print(f"  - Validation MAPE: {metrics.get('val_mape', 0):.2f}%")
                        print(f"  - Test R¬≤: {metrics.get('test_r2', 0):.4f}")
                        print(f"  - Test RMSE: {metrics.get('test_rmse', 0):,.0f}")
                        
                        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª—å—é
                        if metrics.get('test_mape', 0) < 7.67:
                            improvement = 7.67 - metrics.get('test_mape', 0)
                            print(f"\nüèÜ –£–õ–£–ß–®–ï–ù–ò–ï: MAPE —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ {improvement:.2f}% (—Å 7.67% –¥–æ {metrics.get('test_mape', 0):.2f}%)")
                        else:
                            print(f"\nüìä MAPE: {metrics.get('test_mape', 0):.2f}% (–ø—Ä–µ–¥—ã–¥—É—â–∏–π: 7.67%)")
                    
                    # Feature importance
                    if 'feature_importance' in result:
                        print(f"\nüîç –¢–æ–ø-5 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                        for feature in result['feature_importance'][:5]:
                            print(f"  - {feature['feature']}: {feature['importance']:.4f}")
                    
                    return result
                    
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {response.status}")
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                    return None
                    
    except asyncio.TimeoutError:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ (10 –º–∏–Ω—É—Ç)")
        return None
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

async def compare_before_after():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*60)
    
    print("\nüìä –¢–ï–ö–£–©–ê–Ø –ú–û–î–ï–õ–¨ (180 –¥–Ω–µ–π):")
    print("  - –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: ~5,008 –∑–∞–ø–∏—Å–µ–π")
    print("  - Test MAPE: 7.67%")
    print("  - R¬≤: 0.9952")
    
    print("\nüìà –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨ (3+ –≥–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö):")
    await get_current_model_info()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ Sales Forecast Model Retraining (Full Dataset)")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if not await check_api_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
    await get_current_model_info()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:")
    print(f"   - –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (3+ –≥–æ–¥–∞)")
    print(f"   - –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"   - –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 2-5 –º–∏–Ω—É—Ç")
    
    confirmation = input("\n‚ùì –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ? (y/n): ").strip().lower()
    if confirmation != 'y':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
    result = await retrain_model()
    
    if result:
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await compare_before_after()
        
        print("\nüéâ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–¥–µ–ª—å —É—á–∏—Ç—ã–≤–∞–µ—Ç:")
        print("   - –ü–æ–ª–Ω—ã–µ –≥–æ–¥–æ–≤—ã–µ —Ü–∏–∫–ª—ã –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å")
        print("   - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞")
        print("   - –ë–æ–ª—å—à–∏–π –æ–±—ä–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –∏ –æ—Å–æ–±—ã—Ö –¥–Ω–µ–π")
        print("   - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
    else:
        print("\n‚ùå –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")

if __name__ == "__main__":
    asyncio.run(main())