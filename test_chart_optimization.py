#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑"
"""
import requests
import json

BASE_URL = "http://localhost:8002"

def test_chart_optimization():
    print("=" * 70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ì–†–ê–§–ò–ö–ê '–§–ê–ö–¢ vs –ü–†–û–ì–ù–û–ó'")
    print("=" * 70)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π...")
    response = requests.get(f"{BASE_URL}/")
    html_content = response.text
    
    optimizations = {
        "Chart Warning": "chart-warning" in html_content,
        "No Data Message": "chart-no-data" in html_content, 
        "Chart.js Library": "chart.js" in html_content,
        "updateForecastChart Function": "updateForecastChart" in html_content,
        "Max Points Limit": "MAX_POINTS = 30" in html_content,
        "Animation Optimization": "animation" in html_content and "duration:" in html_content,
        "Decimation Plugin": "decimation" in html_content,
        "Tick Optimization": "maxTicksLimit" in html_content
    }
    
    for name, found in optimizations.items():
        status = "‚úÖ" if found else "‚ùå"
        print(f"   {status} {name}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏...")
    
    test_scenarios = [
        {"name": "–ú–∞–ª—ã–π –æ–±—ä–µ–º (7 –¥–Ω–µ–π)", "from": "2025-06-01", "to": "2025-06-07"},
        {"name": "–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º (30 –¥–Ω–µ–π)", "from": "2025-06-01", "to": "2025-06-30"},
        {"name": "–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º (90 –¥–Ω–µ–π)", "from": "2025-03-01", "to": "2025-06-30"}
    ]
    
    department_id = "0d30c200-87b5-45a5-89f0-eb76e2892b4a"  # –ú–∞–¥–ª–µ–Ω Plaza
    
    for scenario in test_scenarios:
        url = f"{BASE_URL}/api/forecast/comparison"
        params = {
            "from_date": scenario["from"],
            "to_date": scenario["to"],
            "department_id": department_id
        }
        
        try:
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                count = len(data)
                
                if count > 30:
                    print(f"   üìä {scenario['name']}: {count} –∑–∞–ø–∏—Å–µ–π (>30, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)")
                elif count > 0:
                    print(f"   ‚úÖ {scenario['name']}: {count} –∑–∞–ø–∏—Å–µ–π (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º)")
                else:
                    print(f"   ‚ö†Ô∏è {scenario['name']}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            else:
                print(f"   ‚ùå {scenario['name']}: –û—à–∏–±–∫–∞ API {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {scenario['name']}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º...")
    
    departments_response = requests.get(f"{BASE_URL}/api/departments/")
    if departments_response.status_code == 200:
        departments = departments_response.json()
        branches_with_data = 0
        total_branches = len(departments)
        
        for dept in departments[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∏–ª–∏–∞–ª–æ–≤
            dept_id = dept['id']
            dept_name = dept['name']
            
            comp_response = requests.get(f"{BASE_URL}/api/forecast/comparison", {
                "from_date": "2025-06-01",
                "to_date": "2025-06-07",
                "department_id": dept_id
            })
            
            if comp_response.status_code == 200:
                data_count = len(comp_response.json())
                if data_count > 0:
                    branches_with_data += 1
                    print(f"   ‚úÖ {dept_name[:30]:30} : {data_count:2d} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"   ‚ö†Ô∏è {dept_name[:30]:30} : –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"\n   –§–∏–ª–∏–∞–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {branches_with_data}/5 –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
    
    # 4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 70)
    print("–ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô")
    print("=" * 70)
    
    print(f"\nüîó –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8002/")
    print("\nüìã –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:")
    print("1. –ù–∞–≤–∏–≥–∞—Ü–∏—è: –ü–†–û–ì–ù–û–ó –ü–†–û–î–ê–ñ ‚Üí üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç / –ø—Ä–æ–≥–Ω–æ–∑")
    print("2. –§–∏–ª—å—Ç—Ä—ã: 01.06.2025 - 30.06.2025, —Ñ–∏–ª–∏–∞–ª '–ú–∞–¥–ª–µ–Ω Plaza'")
    print("3. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å'")
    
    print("\n‚úÖ –û–∂–∏–¥–∞–µ–º—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞")
    print("‚Ä¢ –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö >30 –¥–∞—Ç ‚Üí –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: '‚ö†Ô∏è –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞...'")
    print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ—á–µ–∫")
    print("‚Ä¢ –ü–æ–¥–ø–∏—Å–∏ –æ—Å–∏ X —á–∏—Ç–∞–µ–º—ã–µ (–º–∞–∫—Å–∏–º—É–º 10 –º–µ—Ç–æ–∫)")
    print("‚Ä¢ –ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ >15 —Ç–æ—á–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ –¢–æ—á–∫–∏ –º–µ–Ω—å—à–µ –ø—Ä–∏ >15 –¥–∞–Ω–Ω—ã—Ö (radius: 2 –≤–º–µ—Å—Ç–æ 4)")
    print("‚Ä¢ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'")
    
    print("\nüß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print("‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–∏–æ–¥ 01.03.2025 - 30.06.2025 (–±–æ–ª—å—à–æ–π –æ–±—ä–µ–º)")
    print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π")
    print("‚Ä¢ –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ 30 —Ç–æ—á–µ–∫")
    
    print("\nüîÑ –¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ '–í—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'")
    print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞")
    print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã")

if __name__ == "__main__":
    test_chart_optimization()